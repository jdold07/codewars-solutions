#+ =====================================================================================================================
#+
#+ 6 kyu - Error correction #1 - Hamming Code  [ ID: 5ef9ca8b76be6d001d5e1c3e ] (error-correction-number-1-hamming-code)
#+ URL: https://www.codewars.com/kata/5ef9ca8b76be6d001d5e1c3e
#+ Category: ALGORITHMS  |  Tags: ALGORITHMS | BITS
#+
#+ =====================================================================================================================

{ assert } = require "vitest"
{ encode } = require "./errorCorrectionNumber1HammingCode"

describe "Test encode function", ->
  it "Short word", ->
    result = encode "hey"
    assert.strictEqual(
      result
      "000111111000111000000000000111111000000111000111000111111111111000000111"
      "Should work with short word"
    )
  it "Longer word", ->
    result = encode "The Sensei told me that i can do this kata"
    assert.strictEqual(
      result

      "Should work with longer word"
    )
  it "With numbers", ->
    result = encode "T3st"
    assert.strictEqual(
      result
      "000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000"
      "Should work with numbers"
    )
  it "With special characters", ->
    result = encode "T?st!%"
    assert.strictEqual(
      result
      "000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111"
      "Should work with special characters"
    )

describe "Test decode function", ->
  it "Short word", ->
    result = decode "100111111000111001000010000111111000000111001111000111110110111000010111"
    assert.strictEqual result, "hey", "Should work with short word"
  it "Longer word", ->
    result = decode(

    )
    assert.strictEqual result, "The Sensei told me that i can do this kata", "Should work with longer word"
  it "With numbers", ->
    result = decode "000111000111000111000001000000111111000000111111000111111111000000111011000111111111000111000000"
    assert.strictEqual result, "T3st", "Should work with numbers"
  it "With special characters", ->
    result = decode(
      "000111000111000111000010000000111111111111011111000111111111000000111111000111101111000111000000000000111000000000000111000000111000000111000111"
    )
    assert.strictEqual result, "T?st!%", "Should work with special characters"

e = (text) ->
  bits = ""
  for i in text
    bits += i
      .charCodeAt 0
      .toString 2
      .padStart 8, "0"
  return bits.replace(/1/g, "111").replace /0/g, "000"

describe "Test random encode fuction", ->
  letters = "abcdefghijklmnopqrstuvwxyz0123456789+#-/%"
  it "Random test", ->
    for x in [0...100]
      buffer = ""
      length = Math.ceil(Math.random() * 16) + 2
      for i in [0...length]
        buffer += letters[Math.floor Math.random() * 41]
      assert.strictEqual encode(buffer), e buffer

describe "Test random decode function", ->
  letters = "abcdefghijklmnopqrstuvwxyz0123456789+#-/%"
  it "Random test without errors", ->
    for x in [0...100]
      buffer = ""
      length = Math.ceil(Math.random() * 16) + 2
      for i in [0...length]
        buffer += letters[Math.floor Math.random() * 41]
      assert.strictEqual decode(e buffer), buffer

  it "Random test with errors", ->
    for x in [0...100]
      buffer = ""
      errors = ""
      length = Math.ceil(Math.random() * 16) + 2
      for i in [0...length]
        buffer += letters[Math.floor Math.random() * 41]
      buffer2 = e buffer
      for i in [0...buffer2.length]
        if (i % 3) == 0
          if buffer2[i] == "1"
            errors += "0"
          else
            errors += "1"
        else
          errors += buffer2[i]
      assert.strictEqual decode(errors), buffer
